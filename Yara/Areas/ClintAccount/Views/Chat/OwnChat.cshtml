@model ViewmMODeElMASTER
@{
    ViewData["Title"] = "Chat";
    Layout = "~/Areas/ClintAccount/Views/Shared/_LayoutClint.cshtml";
} 
@* <h4>Client Chat</h4> *@
<img src="@Helper.PathImageuser@ViewBag.img" style="width:30px; height:30px; border-radius: 50%;" />
<label id="userName">@Context.User.Identity.Name</label>
<div style="margin:5px; width:100vw;">
    <div id="messagesList" style="width: 70%; max-height: 400px; padding:5px; border: groove 1px black; border-radius: 8px; overflow-y: auto;">
        @{
            foreach (var item in Model.ViewChatMessage.OrderBy(m => m.MessageeTime))
            {
                <div style="display: flex; @(item.SenderId == ViewBag.UserId ? "justify-content:flex-start; max-width: 80%;" :
                    "justify-content:flex-end; max-width: 80%;");">

                    <li style="display: flex;  @(item.SenderId == ViewBag.UserId ? "justify-content:flex-end; background-color:white;" :
                    "justify-content:flex-start; background-color:gray; color:white;");
                                        border: groove 1px black; margin-bottom: 3px; border-radius: 10px; height: auto; padding: 10px;">
                        <img src="@(item.SenderId == ViewBag.UserId ? Helper.PathImageuser + item.SenderImage : Helper.PathImageuser + item.SenderImage)" style="width:50px; height:50px; border-radius: 50%;" />
                        @item.Message :
                        @item.MessageeTime.ToString("HH:mm")
                    </li>
                </div>
            }
        }
    </div>
    <hr />

    <div class="row" style="width:90%; border-radius:8px; border-top: 1px solid #ccc; background-color: #f1f1f1; padding: 10px; display: flex; flex-direction:row;">
        <input type="text" style="border-radius:8px; width:80%; margin-left:10px" id="messageInput1" placeholder="Type a message" />
        <br />
        <input type="text" style="display:none;" hidden id="sendTo" value="@ViewBag.another" placeholder="send to ...." />
        <br />
        <button style="background-color:aqua; border-radius:50%; width:40px;" id="sendButton" onclick="sendMessage()"><</button>
    </div>
</div>



@section Scripts1 {
    <script src="~/js/signalr.min.js"></script>
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script> *@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>


}

@section Scripts {
    <script type="text/javascript">

        function scrollToBottom() {
            const messagesList = document.getElementById("messagesList");
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        // const connection = new signalR.HubConnectionBuilder().withUrl("/ChatHub").build();

        // connection.start().then(function () {
        //     console.log("Connected to SignalR hub");
        // }).catch(function (err) {
        //     console.error("Error connecting to SignalR hub:", err.toString());
        // });

        connection.on("ReceiveMessage", function (user, message, time) {
            refreshMessagesList();
        });

        function sendMessage() {
            const message = document.getElementById("messageInput1").value;
            const to = document.getElementById("sendTo").value;

            if (!message || !to) {
                console.log("Message or recipient is empty");
                return;
            }

            document.getElementById("messageInput1").value = "";
            // document.getElementById("sendTo").value = "";
            refreshMessagesList();
            connection.invoke("SendMessageToAdmin", message, to).catch(function (err) {
                console.error("Error sending message:", err.toString());
            });
        }

        connection.on("UserDisconnected", function (userName) {
            console.log(`${userName} disconnected`);
        });

        window.onload = function () {
            const user = document.getElementById("userName").textContent;
            connection.invoke("MarkMessagesAsRead", user).catch(function (err) {
                console.error("Error marking messages as read:", err.toString());
            });
        }
        function refreshMessagesList() {
            $.ajax({
                url: '/ClintAccount/Chat/OwnChat/',
                type: 'GET',
                data: { anotherId: '@ViewBag.anotherId' },
                success: function () {
                    location.reload(); 
                },
                error: function (err) {
                    console.error("Error fetching messages:", err.toString());
                }
            });
        }

        function loadChatFromLocalStorage() {
            const chatContainer = document.getElementById("messagesList");
            const chatContent = localStorage.getItem("chatContent");
            if (chatContent) {
                chatContainer.innerHTML = chatContainer.innerHTML +  chatContent;
            }
        }

        window.onload = loadChatFromLocalStorage;
        window.onload = scrollToBottom();
    </script>
}

