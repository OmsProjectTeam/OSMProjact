

@model ViewmMODeElMASTER
@{
    ViewData["Title"] = "OwnChat";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Chat</title>
    <script src="~/js/signalr.min.js"></script>
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script> *@
</head>
<body>
    <div id="userName" style="display:none;">UserName</div>
    <input type="text" id="messageInput1" placeholder="Type your message here..." />
    <input type="text" id="sendTo" placeholder="Send to..." />
    <button onclick="sendMessage()">Send</button>
    <ul id="messagesList"></ul>

    <script type="text/javascript">
        const connection = new signalR.HubConnectionBuilder().withUrl("/yourHubUrl").build();

        connection.start().then(function () {
            console.log("Connected to SignalR hub");
        }).catch(function (err) {
            console.error("Error connecting to SignalR hub:", err.toString());
        });

        connection.on("ReceiveMessage", function (user, message, time) {
            const msg = `${user}: ${message} (${time}) `;
            const li = document.createElement("li");
            li.textContent = msg;
            document.getElementById("messagesList").appendChild(li);
        });

        function sendMessage() {
            const message = document.getElementById("messageInput1").value;
            const to = document.getElementById("sendTo").value;

            if (!message || !to) {
                console.log("Message or recipient is empty");
                return;
            }

            document.getElementById("messageInput1").value = "";
            // document.getElementById("sendTo").value = "";

            const user = document.getElementById("userName").textContent;
            connection.invoke("SendMessageToClients", user, message, to).catch(function (err) {
                console.error("Error sending message:", err.toString());
            });
        }

        connection.on("UserDisconnected", function (userName) {
            console.log(`${userName} disconnected`);
        });

        window.onload = function () {
            const user = document.getElementById("userName").textContent;
            connection.invoke("MarkMessagesAsRead", user).catch(function (err) {
                console.error("Error marking messages as read:", err.toString());
            });
        }
    </script>
</body>
</html>

