@model ViewmMODeElMASTER
@{
    ViewData["Title"] = "OwnChat";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .box-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
        color: #333;
    }

    .chat-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
    }

    .chat-user-img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 10px;
        border: 2px solid #007bff;
    }

    .chat-username {
        font-size: 18px;
        font-weight: bold;
        color: #007bff;
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .chat-message {
        display: flex;
        align-items: flex-start;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        max-width: 70%;
    }

    .chat-message-sent {
        background-color: #e6f7ff;
        align-self: flex-start;
        margin-left: 10px;
    }

    .chat-message-received {
        background-color: #f1f1f1;
        align-self: flex-end;
        margin-right: 10px;
    }

    .chat-message-img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
        border: 1px solid #ddd;
    }

    .chat-message-content {
        display: flex;
        flex-direction: column;
        max-width: 100%;
    }

    .chat-message-img-msg {
        width: 150px;
        height: auto;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .chat-message-text {
        margin: 0;
        font-size: 14px;
        color: #333;
    }

    .chat-message-time {
        font-size: 12px;
        color: #888;
        align-self: flex-end;
        margin-top: 5px;
    }

    .chat-footer {
        display: flex;
        align-items: center;
        margin-top: 20px;
        border-top: 1px solid #ddd;
        padding-top: 10px;
    }

    .chat-input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 10px;
        margin-right: 10px;
        font-size: 14px;
    }

    .chat-send-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .chat-send-button:hover {
        background-color: #0056b3;
    }

    /* Additional styles for better UI */
    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 10px;
    }

    .chat-messages::-webkit-scrollbar-thumb:hover {
        background-color: #999;
    }

    .chat-footer input[type="file"] {
        display: none;
    }

    .chat-attach-button {
        background-color: transparent;
        border: none;
        cursor: pointer;
        color: #007bff;
        margin-right: 10px;
        font-size: 18px;
    }

    .chat-attach-button:hover {
        color: #0056b3;
    }
</style>

<div class="col-xs-12">
    <div class="box-content">
        <h4 class="box-title">Admin Chat</h4>
        <div class="" style="border: 1px solid #ddd; border-radius: 10px; padding: 20px; background-color: #f9f9f9;">
            <div class="chat-header">
                <img src="@Helper.PathImageuser@ViewBag.img" class="chat-user-img" />
                <label id="userName" class="chat-username">@Context.User.Identity.Name</label>
            </div>
            <div id="messagesList" class="chat-messages">
                @{
                    foreach (var item in Model.ViewChatMessage.OrderBy(m => m.MessageeTime))
                    {
                                <div class="@(item.SenderId == ViewBag.UserId ? "chat-message chat-message-sent" : "chat-message chat-message-received")">
                                    <img src="@(Helper.PathImageuser + item.SenderImage)" class="chat-message-img" />
                                    <div class="chat-message-content">
                                @{
                                    if (item.ImgMsg.Contains("Images/"))
                                    {
                                                        <img src="@item.ImgMsg" class="chat-message-img-msg" />
                                    }
                                }
                                        <p class="chat-message-text">@item.Message</p>
                                        <span class="chat-message-time">@item.MessageeTime.ToString("HH:mm")</span>
                                    </div>
                                </div>
                    }
                }
            </div>
            <div class="chat-footer">
                <label for="ImgSend" class="chat-attach-button"><i class="fa fa-paperclip"></i></label>
                <input type="file" id="ImgSend" />
                <input type="text" id="messageInput1" class="chat-input" placeholder="Type a message" />
                <input type="text" hidden id="sendTo" value="@ViewBag.another" />
                <button class="chat-send-button" onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>
    <!-- /.box-content -->
</div>
@* <div class="Container m-4">
    <h2>Admin Chat</h2>
    <hr />
    <img src="@Helper.PathImageuser@ViewBag.img" style="width:50px; height:50px; border-radius: 50%;" />
    <label id="userName">@Context.User.Identity.Name</label>
    <hr />
    <div id="messagesList" style="width: 70%; max-height: 400px; padding:5px; border: groove 1px black; border-radius: 8px; overflow-y: auto;">
        @{
            foreach (var item in Model.ViewChatMessage.OrderBy(m => m.MessageeTime))
            {
                <div style="display: flex; @(item.SenderId == ViewBag.UserId ? "justify-content:flex-start; max-width: 80%;" :
                "justify-content:flex-end; max-width: 80%;");">
                    <li style="display: flex;  @(item.SenderId == ViewBag.UserId ? "justify-content:flex-end; background-color:white;" :
                "justify-content:flex-start; background-color:gray; color:white;");
                                                    border: groove 1px black; margin-bottom: 3px; border-radius: 10px; height: auto; padding: 10px;">
                        <img src="@(item.SenderId == ViewBag.UserId ? Helper.PathImageuser + item.SenderImage : Helper.PathImageuser + item.SenderImage)" style="width:50px; height:50px; border-radius: 50%;" />
                        @{
                            if (item.ImgMsg.Contains("Images/"))
                            {
                                <div style="display: flex; flex-direction:column; gap:5px;">
                                    <img src="@item.ImgMsg" style="width:150px; height:200px; border-radius: 150%;" />
                                    <p> @item.Message :</p>
                                </div>
                            }
                            else
                            {
                                <p>@item.Message :</p>
                            }
                        }
                        @item.MessageeTime.ToString("HH:mm")
                    </li>
                </div>
            }
        }
    </div>
    <hr />
    <br />
    <div>
        <div style="position: fixed; bottom: 10px; border-top: 1px solid #ccc; background-color: #f1f1f1; padding: 10px; display: flex;">
            <input type="text" id="messageInput1" placeholder="Type a message" />
            <br />
            <input type="file" style="border-radius:50%; width:30px; height:100%; margin-left:10px" id="ImgSend" placeholder="Type a message" />
            <input type="text" hidden id="sendTo" value="@ViewBag.another" placeholder="send to ...." />
            <br />
            <button id="sendButton" onclick="sendMessage()">Send</button>
        </div>
    </div>
</div> *@

@section Scripts {
    <script type="text/javascript">
        let connection;

        connection.on("ReceiveMessageFromClient", function (user, message, pathImg, img, time) {
            console.log("done...Client sent a Message");
            refreshMessagesList();

        });

        async function sendMessage() {
            const message = document.getElementById("messageInput1").value;
            const to = document.getElementById("sendTo").value;
            const fileInput = document.getElementById("ImgSend");
            const file = fileInput.files[0];

            let filePath = null;
            if (file) {
                try {
                    filePath = await uploadFile(file);
                } catch (error) {
                    console.error("Error uploading file:", error);
                    return;
                }
            }

            document.getElementById("messageInput1").value = "";
            fileInput.value = "";

            connection.invoke("SendMessageToClients", message, to, filePath)
                .then(function () {
                    console.log("Send Message To Clients successfully");
                    refreshMessagesList();
                    scrollToBottom();
                })
                .catch(function (err) {
                    console.error("Error sending message:", err.toString());
                });
        }

        async function refreshMessagesList() {
            const anotherId = '@ViewBag.anotherId';

            try {
                const response = await fetch(`/Admin/Chat/Refresh/${anotherId}`, {
                    method: 'GET'
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }

                const html = await response.text();
                console.log(html);
                document.getElementById('messagesList').innerHTML = html;
            } catch (error) {
                console.error("Error fetching messages:", error);
            }
        }

        async function uploadFile(file) {
            const formData = new FormData();
            formData.append("file", file);

            const response = await fetch("/Admin/chat/uploadFile", {
                method: "POST",
                body: formData
            });

            if (response.ok) {
                const data = await response.json();
                return data.filePath; 
            } else {
                throw new Error("File upload failed");
            }
        }

        window.onload = function () {
            const user = document.getElementById("userName").textContent;
            connection.invoke("MarkMessagesAsRead", user).catch(function (err) {
                console.error("Error marking messages as read:", err.toString());
            });
        }

        async function scrollToBottom() {
            const messagesList = document.getElementById("messagesList");
            messagesList.scrollTop = await messagesList.scrollHeight;
        }
        window.onload = scrollToBottom();
    </script>
}
@section Scripts1 {
    <script src="~/js/signalr.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
}

